{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a sample notebook for TP2 in pytorch, corresponding to <code>tgabor.py</code>.<br>\n",
    "This is a \"Markdown\" (comment) cell. Double click on it to see the source code. Click on run while selected to see it formatted.<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is a \"Code cell\". Click on \"Run\" to execute it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torchvision\n",
    "\n",
    "import math\n",
    "import time\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we check whether a GPU is available.<br>\n",
    "You may comment or uncomment the second line to run with or withou a GPU.<br>\n",
    "You will need to re-run all the cells after this one to see the difference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cuda:0\n"
     ]
    }
   ],
   "source": [
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "#device = \"cpu\"\n",
    "print(device)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next two cells contain two versions of the same kernel initialization function.<br>\n",
    "The first one uses sequential loops while the second one uses parallel tensor operations.<br>\n",
    "This function corresponds to eight calls to the TP2 <code>gabor_kernel()</code> function, each corresponding to a different orientation but to a 
signle wavelength. It only has to be called four times, one for each wavelength.<br>\n",
    "Unlike in <code>TP2 gabor_kernel()</code>, the result is not a 2D array of complex numbers, it is a 3D array of real numbers. The third 
dimension is $2\\times8=16$. Real parts are in feature maps 0 to 7 and imaginary parts are in feature maps 8 to 15.<br>\n",
    "Both functions include execution time measurement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gabor_kernel_init_seq(weight,lambd = 16.0, nt = 8, n = 0, sl = 0.7, st = 1.4, nl = 4.0):\n",
    "    if torch.cuda.is_available(): torch.cuda.synchronize()\n",
    "    t0 = time.time()\n",
    "    if n <= 0: n = 1+2*int(nl*lambd)\n",
    "    gl = -0.5/(sl*sl)  # lambda direction scale factor\n",
    "    gt = -0.5/(st*st)  # theta direction scale factor\n",
    "    for t in range (0, nt):\n",
    "        theta = t*math.pi/nt  # orientation\n",
    "        c = math.cos(theta)/lambd  # rotation and scaling\n",
    "        s = math.sin(theta)/lambd  # parameters\n",
    "        x0 = 0.5*(n-1)*(c+s)  # translation\n",
    "        y0 = 0.5*(n-1)*(c-s)  # parameters\n",
    "        sc = 1.0/(2*math.pi*sl*st*lambd*lambd)  # Gaussian normalization factor\n",
    "        for y in range (0,n):\n",
    "            for x in range (0,n):\n",
    "                xr = c*x+s*y-x0  # centering, rotation and scaling\n",
    "                yr = c*y-s*x-y0  # centering, rotation and scaling\n",
    "                a = 2.0*math.pi*xr  # wave phase\n",
    "                g = sc*math.exp(gl*xr*xr+gt*yr*yr)  # Gaussian amplitude\n",
    "                weight[t+0*nt, 0, y, x] = g*math.cos(a)  # real component\n",
    "                weight[t+1*nt, 0, y, x] = g*math.sin(a)  # imaginary component\n",
    "    if torch.cuda.is_available(): torch.cuda.synchronize()\n",
    "    print(\"kernel init sequential %dx%d: %.2f ms\"% (n, n, 1000*(time.time()-t0)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gabor_kernel_init(weight,lambd = 16.0, nt = 8, n = 0, sl = 0.7, st = 1.4, nl = 4.0):\n",
    "    if torch.cuda.is_available(): torch.cuda.synchronize()\n",
    "    t0 = time.time()\n",
    "    if n <= 0: n = 1+2*int(nl*lambd)\n",
    "    gl = -0.5/(sl*sl)  # lambda direction scale factor\n",
    "    gt = -0.5/(st*st)  # theta direction scale factor\n",
    "    x = torch.tensor(range(n)).unsqueeze(0).expand(n,n)  # x coordinate\n",
    "    y = torch.tensor(range(n)).unsqueeze(1).expand(n,n)  # y coordinate\n",
    "    for t in range (0, nt):\n",
    "        theta = t*math.pi/nt  # orientation\n",
    "        c = math.cos(theta)/lambd  # rotation and scaling\n",
    "        s = math.sin(theta)/lambd  # parameters\n",
    "        x0 = 0.5*(n-1)*(c+s)  # translation\n",
    "        y0 = 0.5*(n-1)*(c-s)  # parameters\n",
    "        sc = 1.0/(2*math.pi*sl*st*lambd*lambd)  # Gaussian normalization factor\n",
    "        xr = c*x+s*y-x0  # centering, rotation and scaling\n",
    "        yr = c*y-s*x-y0  # centering, rotation and scaling\n",
    "        a = 2.0*math.pi*xr  # wave phase\n",
    "        g = sc*torch.exp(gl*xr*xr+gt*yr*yr)  # Gaussian amplitude\n",
    "        weight[t+0*nt, 0] = g*torch.cos(a)  # real component\n",
    "        weight[t+1*nt, 0] = g*torch.sin(a)  # imaginary component\n",
    "    if torch.cuda.is_available(): torch.cuda.synchronize()\n",
    "    print(\"kernel init %dx%d: %.2f ms\"% (n, n, 1000*(time.time()-t0)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we define the whole Gabor transform computation as a single network.<br>\n",
    "At this points, the kernels contain random initial values.<br>\n",
    "There is a set of filters (<code>conv2d()</code>) per wavelength since the size of the fliters depend upon it.<br>\n",
    "The size of the filters are large compared to typical CNN filters.<br>\n",
    "<code>F.adaptive_avg_pool2d()</code> does a global average pooling resulting in a $1\\times1$ image, hence the need for a squeeze, after which 
the results can be concatenated.<br>\n",
    "Unlike in classical convolutional neural networks where convolutions are combined squentially, the convolutions here are computed in parallel 
and concatenated (after the global pooling and squaring).<br>\n",
    "The last two lines computes the sum of the \"energies\" for the real and imaginary parts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Net(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Net, self).__init__()\n",
    "        self.conv0 = nn.Conv2d(1, 16, 25, bias=False)\n",
    "        self.conv1 = nn.Conv2d(1, 16, 49, bias=False)\n",
    "        self.conv2 = nn.Conv2d(1, 16, 97, bias=False)\n",
    "        self.conv3 = nn.Conv2d(1, 16, 193, bias=False)\n",
    " \n",
    "    def forward(self, x):\n",
    "        x0 = torch.squeeze(F.adaptive_avg_pool2d(self.conv0(x)**2, (1, 1)),3)/1\n",
    "        x1 = torch.squeeze(F.adaptive_avg_pool2d(self.conv1(x)**2, (1, 1)),3)/2\n",
    "        x2 = torch.squeeze(F.adaptive_avg_pool2d(self.conv2(x)**2, (1, 1)),3)/4\n",
    "        x3 = torch.squeeze(F.adaptive_avg_pool2d(self.conv3(x)**2, (1, 1)),3)/8\n",
    "        y = torch.cat((x0, x1, x2, x3), dim = 2)\n",
    "        y1, y2 = torch.split(y, 8, dim = 1)\n",
    "        return((y1+y2).transpose(1,2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we do the net instanciation and initialization.<br>\n",
    "If a GPU is available and selected, the net structure is moved onto it.<br>\n",
    "Depending upon whether <code>net.to(device)</code> is called at the beginning or at the end, the filter initialization is done on the GPU or on 
the CPU. You just need to move the # sign and re-run the cell to see the difference in execution time (comment the <code>device = \"cpu\"</code> line 
in the beginning). Not much difference for this.<br>\n",
    "You may also try to replace <code>gabor_kernel_init()</code> with <code>gabor_kernel_init_seq()</code>. Parallelism significantly improves both 
on CPU and GPU. Sequential execution on GPU is worse thant on CPU."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kernel init 25x25: 2.61 ms\n",
      "kernel init 25x25: 2.28 ms\n",
      "kernel init 49x49: 2.33 ms\n",
      "kernel init 97x97: 3.76 ms\n",
      "kernel init 193x193: 79.20 ms\n",
      "total init time: 91.16 ms\n",
      "Net(\n",
      "  (conv0): Conv2d(1, 16, kernel_size=(25, 25), stride=(1, 1), bias=False)\n",
      "  (conv1): Conv2d(1, 16, kernel_size=(49, 49), stride=(1, 1), bias=False)\n",
      "  (conv2): Conv2d(1, 16, kernel_size=(97, 97), stride=(1, 1), bias=False)\n",
      "  (conv3): Conv2d(1, 16, kernel_size=(193, 193), stride=(1, 1), bias=False)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "net = Net()\n",
    "net.to(device)\n",
    "if torch.cuda.is_available(): torch.cuda.synchronize()\n",
    "t0 = time.time()\n",
    "gabor_kernel_init(net.conv0.weight,lambd = 3.0) # slower due to initializations\n",
    "gabor_kernel_init(net.conv0.weight,lambd = 3.0)\n",
    "gabor_kernel_init(net.conv1.weight,lambd = 6.0)\n",
    "gabor_kernel_init(net.conv2.weight,lambd = 12.0)\n",
    "gabor_kernel_init(net.conv3.weight,lambd = 24.0)\n",
    "if torch.cuda.is_available(): torch.cuda.synchronize()\n",
    "print(\"total init time: %.2f ms\"% (1000*(time.time()-t0)))\n",
    "#net.to(device)\n",
    "print(net)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the kernels in the following four cells, each corresponding to a scale (wavelength). Though the kernels look similar at all scales, 
each is twice as big as the previous one, as can bee seen from the scale in pixels of the displayed kernels. The top row correspond to the real part 
and the bottopn row corresponds to ihe imaginary part. Columns correspond to orientations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([16, 1, 25, 25])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fdd0ce08810>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": 
"\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams[\"figure.figsize\"] = (12,6)\n",
    "k0 = list(net.parameters())[0]\n",
    "print(k0.shape)\n",
    "p = torchvision.utils.make_grid(k0, padding = 2, normalize = True)\n",
    "plt.imshow(np.transpose(p.to(\"cpu\").detach().numpy(), (1, 2, 0)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([16, 1, 49, 49])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7fdd0cd6cfd0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": 
"
